// conversion bool to int 

int k=-2;

int f1(){ return 1==3; }
int f2(){ return 3==3; }
int f3(){ return 3==1; }

void g(int x, int z){ if(x) __out z; }

int px1, px2, px3;

int prn()
{
	__out 'D'+*px1;
	__out 'D'+*px2;
	__out 'D'+*px3;
	if( *px1 ) __out 'a';
	if( *px2 ) __out 'b';
	if( *px3 ) __out 'c';
	__out '\n';
}

void main()
{
	if(k) __out 'A';
	if(!(k>2)) __out 'B';
	__out '\n';

	// local declarator
	int x1 = (1==3);
	int x2 = (3==1);
	int x3 = (1==1);

	px1 = &x1;
	px2 = &x2;
	px3 = &x3;

	prn();

	// assignment
	x1 = (1==3);
	x2 = (3==1);
	x3 = (1==1);

	prn();

	// +l
	x1 = (1==3)+0;
	x2 = (3==1)+0;
	x3 = (1==1)+0;
	prn();

	// +r
	x1 = 0+(1==3);
	x2 = 0+(3==1);
	x3 = 0+(1==1);
	prn();

	// -l
	x1 = (1==3)-0;
	x2 = (3==1)-0;
	x3 = (1==1)-0;
	prn();

	// -r
	x1 = -(0-(1==3));
	x2 = -(0-(3==1));
	x3 = -(0-(1==1));
	prn();

	// *r
	x1 = 1*(1==3);
	x2 = 1*(3==1);
	x3 = 1*(1==1);
	prn();

	// *l
	x1 = (1==3)*1;
	x2 = (3==1)*1;
	x3 = (1==1)*1;
	prn();

	// %l same for %r, /r, /l
	x1 = (1==3)%3;
	x2 = (3==1)%3;
	x3 = (1==1)%3;
	prn();

	// unary +
	x1 = +(1==3);
	x2 = +(3==1);
	x3 = +(1==1);
	prn();

	// unary -
	x1 = -(1==3);
	x2 = -(3==1);
	x3 = -(1==1);
	prn();

	// post[]
	int a[2];
	__out 'a'+ ( &(a[1==3]) -a );
	__out 'a'+ ( &(a[1==1]) -a );
	__out 'a'+ ( &(a[3==1]) -a );

	// return
	if( f1() ) __out '1';
	if( f2() ) __out '2';
	if( f3() ) __out '3';

	// argument list
	g(1==3,'a');
	g(1==1,'b');
	g(3==1,'c');
}

